//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package m1.projet.emusik.Server;

public class SearchResult implements java.lang.Cloneable,
                                     java.io.Serializable
{
    public Song song;

    public float score;

    public SearchResult()
    {
        this.song = new Song();
    }

    public SearchResult(Song song, float score)
    {
        this.song = song;
        this.score = score;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SearchResult r = null;
        if(rhs instanceof SearchResult)
        {
            r = (SearchResult)rhs;
        }

        if(r != null)
        {
            if(this.song != r.song)
            {
                if(this.song == null || r.song == null || !this.song.equals(r.song))
                {
                    return false;
                }
            }
            if(this.score != r.score)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Server::SearchResult");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, song);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, score);
        return h_;
    }

    public SearchResult clone()
    {
        SearchResult c = null;
        try
        {
            c = (SearchResult)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Song.ice_write(ostr, this.song);
        ostr.writeFloat(this.score);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.song = Song.ice_read(istr);
        this.score = istr.readFloat();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SearchResult v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public SearchResult ice_read(com.zeroc.Ice.InputStream istr)
    {
        SearchResult v = new SearchResult();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SearchResult> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SearchResult v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SearchResult> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(SearchResult.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final SearchResult _nullMarshalValue = new SearchResult();

    /** @hidden */
    public static final long serialVersionUID = -413880010978074412L;
}

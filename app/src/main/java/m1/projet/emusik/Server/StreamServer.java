//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package m1.projet.emusik.Server;

public interface StreamServer extends com.zeroc.Ice.Object
{
    String initClient(String session, com.zeroc.Ice.Current current);

    Song[] getSongsList(String session, com.zeroc.Ice.Current current)
        throws SessionException;

    String playSong(Song song, String session, com.zeroc.Ice.Current current)
        throws SessionException;

    boolean stop(String session, com.zeroc.Ice.Current current)
        throws SessionException;

    boolean resume(String session, com.zeroc.Ice.Current current)
        throws SessionException;

    boolean deleteSong(Song song, String session, com.zeroc.Ice.Current current)
        throws SessionException;

    boolean pause(String session, com.zeroc.Ice.Current current)
        throws SessionException;

    SearchResult[] searchTitle(String title, String session, com.zeroc.Ice.Current current)
        throws SessionException;

    boolean transfer(String title, String artist, String user, int offset, byte[] data, int fullsize, String session, com.zeroc.Ice.Current current)
        throws SessionException;

    Song getSong(String title, String artist, String session, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Server::StreamServer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Server::StreamServer";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_initClient(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_session;
        iceP_session = istr.readString();
        inS.endReadParams();
        String ret = obj.initClient(iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getSongsList(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_session;
        iceP_session = istr.readString();
        inS.endReadParams();
        Song[] ret = obj.getSongsList(iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        songsHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_playSong(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Song iceP_song;
        String iceP_session;
        iceP_song = Song.ice_read(istr);
        iceP_session = istr.readString();
        inS.endReadParams();
        String ret = obj.playSong(iceP_song, iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stop(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_session;
        iceP_session = istr.readString();
        inS.endReadParams();
        boolean ret = obj.stop(iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_resume(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_session;
        iceP_session = istr.readString();
        inS.endReadParams();
        boolean ret = obj.resume(iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteSong(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Song iceP_song;
        String iceP_session;
        iceP_song = Song.ice_read(istr);
        iceP_session = istr.readString();
        inS.endReadParams();
        boolean ret = obj.deleteSong(iceP_song, iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_pause(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_session;
        iceP_session = istr.readString();
        inS.endReadParams();
        boolean ret = obj.pause(iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_searchTitle(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_session;
        iceP_title = istr.readString();
        iceP_session = istr.readString();
        inS.endReadParams();
        SearchResult[] ret = obj.searchTitle(iceP_title, iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        searchResultsHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_transfer(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        String iceP_user;
        int iceP_offset;
        byte[] iceP_data;
        int iceP_fullsize;
        String iceP_session;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        iceP_user = istr.readString();
        iceP_offset = istr.readInt();
        iceP_data = istr.readByteSeq();
        iceP_fullsize = istr.readInt();
        iceP_session = istr.readString();
        inS.endReadParams();
        boolean ret = obj.transfer(iceP_title, iceP_artist, iceP_user, iceP_offset, iceP_data, iceP_fullsize, iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getSong(StreamServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        String iceP_session;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        iceP_session = istr.readString();
        inS.endReadParams();
        Song ret = obj.getSong(iceP_title, iceP_artist, iceP_session, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Song.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "deleteSong",
        "getSong",
        "getSongsList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "initClient",
        "pause",
        "playSong",
        "resume",
        "searchTitle",
        "stop",
        "transfer"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_deleteSong(this, in, current);
            }
            case 1:
            {
                return _iceD_getSong(this, in, current);
            }
            case 2:
            {
                return _iceD_getSongsList(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 7:
            {
                return _iceD_initClient(this, in, current);
            }
            case 8:
            {
                return _iceD_pause(this, in, current);
            }
            case 9:
            {
                return _iceD_playSong(this, in, current);
            }
            case 10:
            {
                return _iceD_resume(this, in, current);
            }
            case 11:
            {
                return _iceD_searchTitle(this, in, current);
            }
            case 12:
            {
                return _iceD_stop(this, in, current);
            }
            case 13:
            {
                return _iceD_transfer(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
